1::.::( NO DESCRIPTION AVAILABLE )
2::..::( NO DESCRIPTION AVAILABLE )
3::simpif.pl::Demonstrates using if to compare numbers.
4::mi2km.pl::Not my script.  This script lets user enter a number without units being specifiedto miles and converts that number to miles and kilometers.
5::simintlim.pl::Demonstrates how perl automatically converts large numbers to scientific notation.
6::simcomp.pl::Takes two numbers the user inputs, and compares themwith an if statement.  If the numbers are equal, ittells the user so; otherwise, there is no response.
7::futval.pl::Calculates future value of an investment based on aninitial amount and on regular monthly payments.
8::ehex1.pl::Not my script. Not sure what this does, but it seems to be some sort of HTML parsing code.
9::simwhile.pl::Uses a while loop to demonstrate a simple count loop.
10::simuntil.pl::Uses an until loop to let user keep trying to enter the correct answer.  If the correct answer is input the program tells user the answer is correct and then abruptly ends.
11::eh1stsrceng.pl::Not my script.  Looks like this is a search engine script.  Does not work yet; may be missing modules.
12::arrayfrstdin.pl::Print array from standard input w/ no prompts.  Required to press <ctrl> + d to end program.
13::pwr2lst.pl::Simple exponent operator demonstration.  Asks for a number, n, and prints 2 to the exponent n.
14::countfiles.pl::Simple script.  Uses foreach loop and calibration to count the number of files, folders, etc in a given folder.
15::dftest1wrsh.pl::Test script to help me write ascript to display system info inreal-time on a cgi page.Uses the AIX "df -k" shell command and creates a webpage on the fly to output that data in the same format as it would print in a terminal window.
16::arrayprnall.pl::Calculates length of array so that it can print all elements in the array.
17::passgen1.pl::This should be my last script of 2001.  This is my first draft of a a password generating program. Currently it only does alpha permutations from aaa to zzz.  This does not include capitals, numerals, or symbols. Eventually it will cycle through all letters and number combinations.  Perhaps I can do it with an ascii and a formula?  Well, here we go...
18::linkextortest_1_w2ndrefpg.pl::Simple demonstration of HTML_LinkExtor module.  Gets all links found in the html doc and saves it to a file.  Checks for changes periodically (user specified), and if the page has changed it will record new info in a change_log.There are 3 associated files:1)  $basehtmldoc:  where the code fromindicated web page is stored. servesas a reference and all else is based off of this.2)  $urllog: ($filename_$date_urllog.txt);  a filethat stores the urls found as text.3)  $urlpage: the HTML version where each url ismade into a hyperlink.4)  $
19::getprogdescr_v3.pl::Reads one of my perl files and prints out the description text.(3rd try)
20::matchbetweenstartnend_perlfaq6.pl::Is unadulterated example from the Perl FAQ 6, found under : Here's code that finds everything between START and END in a paragraph: 
21::arrayvaraslicesubscr.pl::Demonstrates array range used as subscript.
22::calccdrspd.pl::Calculates avg. recording speed for CD-R mediabased on capacity(MB) and actual record periodlength.
23::chkifflexists.pl::This program checks to see if an opened file actually exists.  If yes, it displays the contents of the file to stdout in all UPPER CASE.
24::ehgeturlparsepix_3.pl::Various pieces of code to try in the ehgeturlparsepix.pl script.Rips HTML source code from aweb page, then lets you compare.that one to subsequent rips of thesame page.  Differences are storedin a text file.
25::cpyfiletoanother.pl::This script copies the contents of one file to another instantly.  If the destination file doesn't exist, it creates it. If it can't open the input or output file, it tells you so.  WARNING!  This file will overwrite a file that already exists: UNFORGIVING.
26::retrievematches.pl::Uses the "$1" variable as the default result of a matched string.derived from the following usenet post:http://groups.google.com/groups?hl=en&selm=902862439.23601.0.nnrp-06.c2de775f%40news.demon.co.uk
27::die2disperror.pl::This simple program reads a file to standard output. If filename is incorrect or does not exist, it gives an error.  Demonstrates using error msgs if open is unsuccessful.
28::ehcreatefile.pl::Demonstrates how to create a new directory w/ perl, how to use the BASENAME and CWD modules, how to give everyone access, and how to delete a directory tree.  NOTE:  You must use the fully qualified path when asked for a path.
29::ehgeturl.pl::This program will rip the source code of any url. It will now also save the source as an html document in a specified folder.
30::eh_renameext.pl::I am having a problem trying to convert extensions w/ the following syntax:mv *.perl *.plThis is supposed to rename all files that end in .perl to 'whatever.pl'.It just doesn't quite work.This script should solve that problem.
31::wsinst_multi.pl::To automatically create a config file fordoing multiple image creates for workstationswith similar configurations.I wrote a cshell script that does thiscalled "wsinst_multi.makecfg.csh", andI think the perl code should beeasier to write.
32::ehgeturlparsejpgngif.pl::This program will rip the source code of any url. It will now also save the source as an html document in a specified folder.  Currently, it only downloads text (HTML), not the corresponding images.WORKS GOOD !!!  --> Gets HTML sourcecode but not pix.
33::ehtst2.pl::Hello World-type simple print demonstration.
34::ehrdnprntlnsfrfile.pl::Demonstrates using a while loop to read all lines in a file.  Uses a local backup of /etc/passwd.This file requires the file:~v2cib484/passwd.051801.bkpto run.
35::wsinst_multi_wfulltracing.pl::To automatically create a config file fordoing multiple image creates for workstationswith similar configurations.I wrote a cshell script that does thiscalled "wsinst_multi.makecfg.csh", andI think the perl code should beeasier to write.
36::rename2::Not my script.  Taken from : http://www.evolt.org/article/Renaming_Files_with_Perl/17/351/
37::rename3.pl::Rename files using split.
38::joinsngllns.pl::Takes each line entered, adds a space at the end, and joins the lines together to make one line. Must exit program w/ <ctrl> + d.
39::listinalist.pl::Assign a list as part of another list.
40::merge2files.pl::This file takes the contents of file1 and file2 and merges them vertically; prints a line of 1 then corresponding line of 2; then the next line and so on.
41::findallfromstart2fin.pl::Demonstrates using regular expressions to search a file for all text between a string $start, and $end.
42::prtlstfrmrange.pl::Given a start number and an end number, this script prints a list of all the integers that fall between them.
43::randnumgen.pl::Generates 10 random numbers.
44::rdfln2array.pl::Reads entire input file into an array
45::rdinpt2arry.pl::Unless the file open was successful, print an error msg and quit.  Otherwise, print the contents of the file to screen.
46::mail_form.pl::Not my script.  Mail Form Handler.  Doesn't quite work yet.
47::blue.pl::Not my script.  Demonstrates ldap search commands. Does a lookup in bluepages and returns the attributes listed in the command for all employees in the "rocheste" directory. It is opened in a pipe so that we can format the data as it comes in.
48::simpasswdcheck.pl::This is a very simple password checker script.
49::getprogdescr_v4.pl::Reads one of my perl files and prints out the description text.(3rd try)
50::srchnreplace.pl::Not my script.  Will replace any number of words with another word at every instance.
51::wrtupcs2stderr.pl::This file takes contents of a file and displays the output in all capital letters.
52::getprogdescr_v5.pl::Reads one of my perl files and prints out the description text.Based on version 4 which works.  This version uses a foreach loop to read every file in the list
53::aix_led_errors.pl::User enters in an RS6000 trouble code and this program gives the code's meaning.  Is a good example of elsif statements.  It seems to me this file could be written more efficiently if I set it up as a 2 dimensional array.  
54::aixledcode_make.pl::This program lets a user enter in an AIX LED error code and it will output the meaning of that code per "Service Request Number Cross-Reference Version 4.1"
55::grepanarray.pl::A simple script that finds and prints all lines in a specified text file which contain worda and/or wordb.  It finds all instances, not just the first.
56::geturlsonly.pl::Not my script.  Script found on:http://www.gellyfish.com/htexamples/geturls.plSupposed to get urls, but doesn't work because it doesn't like the Parser.pm module.
57::crtsymsgpostsplit.pl::This little script prints a courtesy message that can be copiedand sent to user.  The advantage is that is sets automaticallyfills in the path names for you.
58::daleyslotteryresults.pl::Not my script.  original filenmae = getloto.perl.  Gets UK lottery result from a given url.
59::scratch.ez::( NO DESCRIPTION AVAILABLE )
60::eh_multiwsinst_perl.pl::Creates a config file and then runs the commandto build wsinstall image from a the inputparameters given by user.
61::eh_makeplscrtmplt.pl::Makes a new file w/ a user-specified name and based on a standard template designed by me (Eric Hepperle).
62::eh_waystoconcat.pl::This file demonstrates various ways to concatenate files in perl.
63::ehcpydosbinfile.pl::Supposed to demonstrate how to copy (upload/download) a binary file in perl.  Does not work.
64::arraycpyncomp.pl::Copy the elements of one array to another and then comparethe resulting array to check for any differences, (thereshould be none).
65::searchfileforavi.pl::Searches a test string and tries to match <something>.avi; useful for searching e-donkey files for descriptions.
66::append2flwsubrtn.pl::Simple demonstration of appending a string to a text file, then printing entire file to screen.  Also demonstrates syntax for getting system time.
67::stdinex.pl::Example from "Teach Yourself Perl in 21 Days".  lets user enter two words, then prints them in reverse order.  Demonstrates how to get input from command line in perl, (<STDIN>).
68::ehformreader.pl::Not my script.  Form reader program.  This one seems to work.  Need to read and figure out it's mechanics.
69::foo.pl::( NO DESCRIPTION AVAILABLE )
70::splittest.pl::simple program to demonstrate the split function of perl.
71::arraytest1.pl::Test script to demonstrate reading array variables and displaying them in a specific line format.  (For example: el 1, el 2, etc ...)
72::ehgeturlparsepix.pl::Rips HTML source code from aweb page, then lets you compare.that one to subsequent rips of thesame page.  Differences are storedin a text file.
73::upcs2lwrcsconv.pl::Converts a line of text to all lowercase.
74::lwrcs2uprcsconv.pl::Not my script.  Simple lowercase to all upper-case conversion script.
75::dcefix.pl::Runs the dce repair procedure from helpful.d as an automated script.DOES NOT WORK !!!
76::concatlntest.pl::This file allows user to type in an infinite number ofstrings, and then concatenates them into onemega-string.Taken from:'TEACH YOURSELF PERL IN 21 DAYS'; 1995; SAM's Publishing;David Till
77::eh_mailpipedcmd.pl::Searches for id's owned by a userbased on an employee serialentered	by the user.Additionally, it converts theserial to uppercase, then lowercase and does a modified searchas well.Finally, it will mail someone theresults.
78::eh_rs6000diag_1.pl::Eventually, this program will give the option to do just about everyting.  It currently runs a batch process of diagnostic aix commands and then writes the results to an unfiltered report file.  Afs id commands are also executed.  The next step will be to parse the unabridged log file and create a report based on identified flags.
79::descriptionfile.ez::( NO DESCRIPTION AVAILABLE )
80::bluepageselements.ez::( NO DESCRIPTION AVAILABLE )
81::simpleyesorno.pl::Demonstrates usage of simpleconditional statement using aloop.
82::eh_dailylogger_script_r1.pl::To allow one to maintain a log of dailyactivities, and display that log as awebpage.  It is based on my perl webpagecreator scriptThis is the first working, functionalversion.NOTE: This is a user customizable versionbut not extremely user-friendly.
83::which_remote_installserver.pl::Quickly searches the file install_servers.ez for an install server based on the location entered.
84::searchbluepages.pl::Uses perl to search blue pages.  Parses environment variables based on the "=" sign.  Allow use to specify which variables to see.
85::ehcgiexp1.pl::Not my script.  This appears to be a test script for parsing long/complex urls.  Does not work yet.
86::weblinklistmaker.pl::To create a template for making subject-classified weblink list.  Output is an html document with table and hyperlinks.
87::arrayslicetest.pl::Demonstrates usage of array slice.
88::outfile.ez::( NO DESCRIPTION AVAILABLE )
89::eh_createtblnapndcells_2.pl::Lets user maintain a log of daily events.  Very versatile and can be used as a guestbook, problem logger, etc...  This version does not format the page w/ the <BR> tag, so newline chars are not recognized and everything gets squished together.
90::arraysorttest.pl::Create an array from user input, then sort and printsorted array list.
91::checkcoreanderrpt.pl::Checks core file and error report and outputs an html page detailing the findings.
92::desttextfile1.ez::( NO DESCRIPTION AVAILABLE )
93::cshinprl_test1.pl::Simple demonstration of how to execute a shell command (csh) in a perl script; must use backticks.
94::eh_template.pl::Just testing my script.  If it doesn't work I will have to revise it.
95::perlcron_mcmahan.pl::Used as an automatic timer like unix cron function.  This is copied from the book "Automating Windows w/ Perl by Scott McMahan".
96::ehdailylog.pl::Lets user maintain a daily log of activities and is veryversatile.  It can can be used as a guestbook, a bulletinboard, etc...NOTE:  This version is a MILESTONE.
97::octal2ascii.pl::To create a table for converting octal to ascii.
98::eh_createtblnapndcells_new_1.pl::Lets user maintain a daily log of activities and is veryversatile.  It can can be used as a guestbook, a bulletinboard, etc...NOTE:  This version is a MILESTONE.
99::ehforeachperl_test.pl::Demonstrates reading lines from a file using a foreach loop.
100::getjusturls.pl::Not my script. Not sure what it does.  Relies heavily of the Parse submod of the HTML module.
101::openurlwperl.pl::Not (entirely) my script.  (I modified it some).  Demonstrates how to use the "system" command to open a program (i.e.: browser).
102::eh_custissue_log.pl::This program uses a form interfacecoupled with my logging script tocreate an interface for the techto enter customer information.it then prints up a "flags" report,which it appends to the log,thereby creating a more total picture.Also, this version has the beginning of a printer diagnostic function.  The printer diagnostic writes host, queue, and problem description to an html log file, but currently does not have correct formatting.
103::printfex1.pl::Not my script.  Demonstrates the printf command and formatting text.
104::testhash.pl::Simple hash example.  Allows one to select one item from a 2 dimensional array.
105::preincrtest.pl::This little piece of code starts at a value + 1, (in this case: 0),and increments by adding one until value is greater than 5.
106::eh_simmatchhtml.pl::Pulls urls out of text (not html links)and writes them to a file, then opens thefile in a new browser window.
107::ehmakeurltest.pl::Demonstrates various ways to concatenate/join text and variables together to create url's, ip's, etc...
108::ehmakeurltest_multiopen.pl::Opens sequentially numbered urls automatically.  Usefull if you are on http://www.yahoo.com/news/article_a01_news.html and you know there are 5 more pages, you can set the start number to "01" and end to "06", then you enter the url formatting info and walla! -- up pops 6 pages of the article!
109::ehmy1st_clntsd_imagemap.pl::Not my script.  Client side image map example.  Should write a new webpage to a file, then launch, or just do cgi.
110::htmlenvvars.pl::Displays all environment variables for CGI's, etc...  Taken almost completely from the PERL FAQ.
111::caseconv.pl::Demonstrates converting input to all lowercase or all uppercase.
112::rwline.pl::Not my script.  Simple script that repeats a line of text (emulates the echo command), and auto-escapes (no ctrl-d necessary).
113::rdlnprnttest.pl::Demonstrates how to read each line in a file with a while loop, and print them to the screen.  This script also contains the 'usage' usage.
114::phonelist.pl::Based on my searchbluepages.pl script.  Prints up a table of user info for most common users calling or being called by the AIX/AFS helpdesk.  Copy to cgi-bin folder.
115::getalllinksfromwebpage.pl::Based on the ActivePerl Documentation example for HTML_LinkExtor.  Gets a random link from a given url.
116::plfaq_extracturls.pl::Not my script.  This is taken directly from Perl FAQ 9.  How to extract urls from an html source page.  It works!
117::searchhelpfuld.pl::This little script searches a text file (in this case, the helful.d file) for any word the user enters and then displays every line containing that word.  Use a command line argument (i.e.: type the command and then a space and then the word you want to find.
118::wrdcounttest.pl::Counts the number of words user enters and displaysresult.  Any two consecutive spaces are interpreted asa space and a word. Must use <ctrl> + d to exit.
119::delvol_multi.pl::(Based on my c-shell script: eh_delvol2.2.csh).  Lets user input and save a list of volumes to delete and then deletes them one by one [actually, I think it marks them for deletion].Separates AFS volumes from DFS volumesin a list file by matching character  strings, and stores AFS volume names  in a new list file.
120::eh_printerproblem_logger.pl::Lets user create and maintain log of printer problems daily.  Based on my generic logging script.
121::eh_rdlnsfrmlsfl.pl::This program will allow me to figure out how to format output of standard shell commands and parse and manipulate so that I can rearrange the data any way I need to.
122::eh_printerproblem_logger_v2.pl::Lets user maintain creates and maintainslog of printer problems.NOTE:  This is the second version; thefirst version doesn't work.
123::pixmapgen.pl::Will create a table of rowlength = 6, and row count = total pix count / 6, and if there is a remainder, add one.  This is an on the fly picture map generator.NOTE:		You must rename the file extensionto "acgi" for secure access, orcgi for non-secure.  Also, youmust copy this file to your cgi-bindir.
124::ehreplacetest.ez::( NO DESCRIPTION AVAILABLE )
125::eh.perl.dir.zip::( NO DESCRIPTION AVAILABLE )
126::uncataloged_htmlmatch.pl::Not my script.  Searches a local text file and extracts all links.  Taken from:http://www.ics.uci.edu/pub/websoft/libwww-perl/archive/1994/0123.html
127::ehreplacetest_res.ez::( NO DESCRIPTION AVAILABLE )
128::uncataloged_htmlmatch2.pl::Not my script.  Supposed to walk "...the web of files starting with those listed in "infile", and makes a list of titles and urls."  Doesn't work.Taken from:http://www.uic.edu/depts/accc/seminars/perlii/example.shtml
129::uncataloged_suckurl1.pl::Not my script.  Code snippet that demonstrates a regex for sucking urls.  Doesn't work yet.   Taken from:http://www.peak.org/~regan/perl/
130::testtextfile1.ez::( NO DESCRIPTION AVAILABLE )
131::ehrplcnwlncharwbrtag_test.pl::Converts/Replaces new line characters to <BR> html sequence.  Uses source and destination files.
132::DetectBrowserWronkiewicz.pl::Not my script.  Determines browser type (Netscape, Explorer, etc ...) by doing test on the HTTP_USER_AGENT cgi environment varible.
133::getrndlnksfromwebpg.pl::Based on the ActivePerl Documentation example for HTML_LinkExtor.  Gets a random link from a given url. This script gives diagnostic output and tracing to show how it works (added by me).
134::htmlenvvars_fancy_1.pl::Displays all environment variables for CGI's, etc...  Taken almost completely from the PERL FAQ.
135::phonelist_r2_120401.pl::Based on my searchbluepages.pl script.  Prints up a table of user info for most common users calling or being called by the AIX/AFS helpdesk.  Copy to cgi-bin folder.
136::phonelist_r3_120501.pl::Based on my searchbluepages.pl script.  Prints up a table of user info for most common users calling or being called by the AIX/AFS helpdesk.  Copy to cgi-bin folder.
137::phonelist_r4_120601.pl::Based on my searchbluepages.pl script.  Prints up a table of user info for most common users calling or being called by the AIX/AFS helpdesk.  Copy to cgi-bin folder.
138::ibmhelpphonemap.pl::Lets you type in what you are looking for and does a database search based on several search te rms, (not boolean).  Is not perfect but should be helpful.          For example:  If you want to know the 1-888-IBM-HELP path for Tivoli support, you would type in  "Tivoli" and it would bring up the response:          Tivoli:         4,3,8          Bada-bing, bada-boom!  No listening through multiple phone messages, just an instant path.          Will be a perl script at first, then try cgi, then try to incorporate a perl-web form interface.
139::pixmapgen_ver1_workssofar.pl::Will create a table of rowlength = 6, and row count = total pix count / 6, and if there is a remainder, add one.  This is an on the fly picture map generator.
140::pixmapgen_ver2_worksok_121301.pl::Will create a table of rowlength = 6, and row count = total pix count / 6, and if there is a remainder, add one.  This is an on the fly picture map generator.
141::formattables.pl::Simple example of how to use the format command to define fixed character widths in columnar tables for printing.
142::getprogdescr.pl::Reads one of my perl files and prints out the description text.
143::pixmapgen_r3_workspixrtsz_121301.pl::Will create a table of rowlength = 6, and row count = total pix count / 6, and if there is a remainder, add one.  This is an on the fly picture map generator.
144::pixmapgen_r4_colandrowrt_repeats_121301.pl::Will create a table of rowlength = 6, and row count = total pix count / 6, and if there is a remainder, add one.  This is an on the fly picture map generator.
145::formattables_ex2.pl::Simple example of how to use the format command to define fixed character widths in columnar tables for printing. The first one didn't work. Second attempt.
146::formattables_ex3.pl::Simple example of how to use the format command to define fixed character widths in columnar tables for printing. The first one didn't work. Second attempt.
147::findperlfiles.pl::Searches the eh.perl.dir directory for all perl files and parses/manipulates them.  The output is saved in a comma-separated-value file (CSV) for importing into Spreadsheet program (Lotus 123, Excell, etc...).  Uses format and write commands.
148::ehrplcnwlncharwbrtag_test_4.pl::Converts/Replaces new line characters to <BR> html sequence.  Uses source and destination files.
149::getprogdescr_v2.pl::Reads one of my perl files and prints out the description text.
150::htmlparsertest.pl::Demonstrates use of the HTML_Parser Module.  Doesn't work yet.
151::linkextortest_1.pl::Simple demonstration of LinkExtor module.
152::reverseordertest.pl::This script demonstrates how to print words that the userenters, in reverse order.  Must use <ctrl> + d to quit.
153::howtolistdir.pl::Simple demonstration of how to list the contents of a directory in perl.
154::testmultidimarray.pl::Not my script.  Uses multi-dimensional arrays and nested foreach loops to display boolean truth tables.
155::cronlog.txt::( NO DESCRIPTION AVAILABLE )
156::sleeptimer1.pl::Uses the perl 'sleep' function to make a simple event timer.
157::uncatalogued_eh_diffonlyinlatestfile.pl::This is the way to compare two text files in perl.  Where file2 is the newer of the two files.< = file1 and > = file2.This file works and has not been cataloged.
158::testtodelete_1.pl::testing eh_makeplscrtmplt.pl script revision.
159::testtodelete_2.pl::testing eh_makeplscrtmplt.pl script revision. revised to auto change permissions w/ chmod.
160::simifelsifelse.pl::User enters two numbers and it gives msg if they are equal, and different msg if they are not.  Additionally, uses if comparators to determine if one of the numers is greater by one than the other, then reports it to the user.
161::.__afs64FF::( NO DESCRIPTION AVAILABLE )
162::killallnetscapes.pl::Gets all process id's for netscape and then kills them all one by one.  Alleviates an individual having to cut and paste each process number by hand.
163::renamefilesext.pl::Renames all files in a designated folder w/ some other extension.
164::getprogdescr_v6_writecsv.pl::Reads one of my perl files and prints out the description text.Based on version 5 which works perfectly and makes a text log of each filename and its description.This version will write a csv-type filethat can be imported into a spreadsheet prog.It will use the double-colon separator.
165::simifelse.pl::User enters two numbers and it gives msg if they are equal, and different msg if they are not.
166::csvfile.ez::( NO DESCRIPTION AVAILABLE )
167::csvfile.csv::( NO DESCRIPTION AVAILABLE )
168::salvage_volume.pl::Automates the steps involved in salvaging a volume.  Not finished
169::startendtestfile.ez::( NO DESCRIPTION AVAILABLE )
170::sleeptimer1.pl.CKP::Uses the perl 'sleep' function to make a simple event timer.
171::func_getstdtimefrommiltime.pl::Function for converting military time to standard time.  Arguments are $hour.
172::algebrafunc1.pl::Demonstrates processing a numeric function with perl using subroutines implemented as perl functions.
