The part of PERL that I probably liked the least were regular expressions. Basically, regular expressions are one of the most important part of PERL and are used in a lot of concepts. The hardest part to learn is all the different regular expressions. Here's an example of some of the concepts of regular expressions. Use this table for reference you might not quite understand what it's used for until later on in this lesson:

Regular Expression / Meaning 

\S - Any non-whitespace character - Examples: abc123$%^ 

\s - Any whitespace character - Examples: Spaces, and New Lines (\n) 

\d - Any Digit - Examples: 1234567890 

Regular expressions are used to test strings for patterns which you specify. For example if you make a piece of code that says:

if ($test_string =~ /\s/) { &execute_me; }

The PERL will test the scalar $test_string to see if it contains any spaces or new lines (whitespace characters), if it does, then it returns true, otherwise it returns false and whatever is in the IF brackets are not executed.

Probably one of the most useful purposes of regular expressions is to modify strings. This is usually done by using this syntax code:

$string =~ s/ReplaceMe/WithMe/;

What PERL will do is that it will search the scalar $string and replace all entries saying "ReplaceMe" and put "WithMe" in its place. Imagine the possibilities with this script. For example say you didn't want profanity in whatever a user submits to you, then you would make something like:

$replace = 'beep!';
$input =~ s/Fuck|Bitch|Ass|Shit/$replace/gi;

Now let's try to cover this one part at a time. First I assigned the scalar $replace with the value "beep!". Next, consider that the input that the user gives you is stored in the scalar $input. I told PERL in the second line to change all occurances of Fuck OR Bitch OR Ass OR Shit with the $replace scalar. The "|" vertical line symbol specifies OR to PERL. Notice however after the third slash I have "gi". These are complementary to the regular expression replacer. The "g" tells PERL to do a global search. I'll be damned if I know what it means but I like to put it in my scripts. The "i" tells PERL to be case insensitive. As you know, UNIX systems are case sensitive so if someone puts fucK or FuCK or anything that isn't cased exactly as you specify, it won't change it unless you tell it to be case insensitive.

Now replacing is just one use of these Regular Expressions. Another good use for them is to confirm that information is valid. For example if you wanted a user to input a URL to you, it might be important to make sure that they have provided an "http://" at the beginning of the link. To check this you would use regular expressions:

$match = 'http://';
if ($input =~ /\b$match//) { &its_ok; }

Now you may have noticed yet ANOTHER concept of regular expression matching. Before the I tell it to look for the $match scalar, I put in a "\b". The "\b" tells the script to search for $match at the BEGINNING of the scalar $input. Likewise if you put it at the end, it would look for $match at the END of the scalar. Say someone put http:// in the middle of the string then it would still return valid unless you put \b at the beginning.

Now you must learn to apply what you have learned. Say you want to make a simple search engine for your database which you learned how to make on your last lesson. Let's try it out:

open(FILE, "database/1.txt");
@info = <FILE>;
close(FILE);

if ($info[1] =~ /$search_input/) { &its_a_match; }
else { &no_matches; }

That of course is just the base of a search engine. There's several other things you could do to pin down the search more and make it more effective. For example to see the number of matches:

$matches = ($info[1] =~ /$search_input/);

Basically what this piece of code told it to do was to store the amount of times $info[1] encountered the $search_input into the variable $matches.

Those were just a few use of regular expressions. There are several things you can do with them try practicing around in changing how strings are and maybe even touching your hand at having it edit hard-coded HTML pages:

if ($html_line =~ /\b<title>/) { $html_line =~ '<title>New Title Here</title>\n'; }

You try your own stuff =)
 


[ Copyright 2000 Roupen Mouradian, Hot Magma ] 


